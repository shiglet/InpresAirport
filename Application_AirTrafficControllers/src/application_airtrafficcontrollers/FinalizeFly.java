/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application_airtrafficcontrollers;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sadik
 */
public class FinalizeFly extends javax.swing.JDialog {

    /**
     * Creates new form FinalizeFly
     */
    private Client_AirTrafficControllers parent;
    
    public FinalizeFly(Client_AirTrafficControllers parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        signalerJB.setEnabled(true);
        choisirJB.setVisible(false);
        pistesJCMB.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        busyJB = new javax.swing.JRadioButton();
        checkinoffJB = new javax.swing.JRadioButton();
        readyJB = new javax.swing.JRadioButton();
        readytoflyJB = new javax.swing.JRadioButton();
        takingoffJB = new javax.swing.JRadioButton();
        flyingJB = new javax.swing.JRadioButton();
        signalerJB = new javax.swing.JButton();
        checkbaggageJB = new javax.swing.JButton();
        getpisteJB = new javax.swing.JButton();
        pistesJCMB = new javax.swing.JComboBox<>();
        choisirJB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("BUSY");

        jLabel2.setText("CHECKIN_OFF");

        jLabel3.setText("READY");

        jLabel4.setText("READY_TO_FLY");

        jLabel5.setText("TAKING_OFF");

        jLabel6.setText("FLYING");

        buttonGroup1.add(busyJB);
        busyJB.setSelected(true);
        busyJB.setEnabled(false);
        busyJB.setFocusable(false);
        busyJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busyJBActionPerformed(evt);
            }
        });

        buttonGroup1.add(checkinoffJB);
        checkinoffJB.setEnabled(false);
        checkinoffJB.setFocusable(false);

        buttonGroup1.add(readyJB);
        readyJB.setEnabled(false);
        readyJB.setFocusable(false);

        buttonGroup1.add(readytoflyJB);
        readytoflyJB.setEnabled(false);
        readytoflyJB.setFocusable(false);

        buttonGroup1.add(takingoffJB);
        takingoffJB.setEnabled(false);
        takingoffJB.setFocusable(false);
        takingoffJB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                takingoffJBStateChanged(evt);
            }
        });
        takingoffJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takingoffJBActionPerformed(evt);
            }
        });

        buttonGroup1.add(flyingJB);
        flyingJB.setEnabled(false);
        flyingJB.setFocusable(false);
        flyingJB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                flyingJBStateChanged(evt);
            }
        });
        flyingJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flyingJBActionPerformed(evt);
            }
        });

        signalerJB.setText("Signaler fin check in");
        signalerJB.setEnabled(false);
        signalerJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signalerJBActionPerformed(evt);
            }
        });

        checkbaggageJB.setText("Check Baggages");
        checkbaggageJB.setEnabled(false);
        checkbaggageJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbaggageJBActionPerformed(evt);
            }
        });

        getpisteJB.setText("Get Pistes");
        getpisteJB.setEnabled(false);
        getpisteJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getpisteJBActionPerformed(evt);
            }
        });

        pistesJCMB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pistesJCMB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pistesJCMBActionPerformed(evt);
            }
        });

        choisirJB.setText("Choisir piste");
        choisirJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choisirJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(signalerJB)
                        .addGap(26, 26, 26)
                        .addComponent(checkbaggageJB)
                        .addGap(18, 18, 18)
                        .addComponent(getpisteJB))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(busyJB)
                                .addGap(77, 77, 77)
                                .addComponent(checkinoffJB)))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(readyJB)
                                .addGap(52, 52, 52)
                                .addComponent(readytoflyJB)))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(takingoffJB)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(flyingJB))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(choisirJB, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pistesJCMB, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(pistesJCMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(busyJB)
                    .addComponent(checkinoffJB)
                    .addComponent(readyJB)
                    .addComponent(readytoflyJB)
                    .addComponent(takingoffJB)
                    .addComponent(flyingJB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signalerJB)
                    .addComponent(checkbaggageJB)
                    .addComponent(getpisteJB)
                    .addComponent(choisirJB))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void busyJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busyJBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busyJBActionPerformed

    private void signalerJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signalerJBActionPerformed
        // TODO add your handling code here:
        Date time = parent.time;
        Date now = new Date();
        if (time.getTime() - now.getTime() >= 20*60*1000) 
        {
            JOptionPane.showMessageDialog(this, "Au moins 20 minutes !");
        }
        else
        {
            /*try 
            {
                Socket s = new Socket(parent.CheckInIP,parent.CheckinPort);
                dos= new DataOutputStream(s.getOutputStream());
                dis = new DataInputStream(s.getInputStream());
                sendMessage(1000+parent.end);
                s.close();
            } catch (IOException ex) {
                Logger.getLogger(FinalizeFly.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            parent.sendMessage(Client_AirTrafficControllers.WARN_CHECKIN+parent.end);
            String message = parent.readMessage();
            System.out.println(message);
            if(Integer.parseInt(message) ==  Client_AirTrafficControllers.SUCCESS)
            {
                checkinoffJB.setSelected(true);
                signalerJB.setEnabled(false);
                checkbaggageJB.setEnabled(true);
            }
            else
            {
                System.out.println("Nonnn");
            }
        }
    }//GEN-LAST:event_signalerJBActionPerformed

    private void checkbaggageJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbaggageJBActionPerformed
        // TODO add your handling code here:
        parent.sendMessage(Client_AirTrafficControllers.CHECK_BAGGAGE+parent.sep+parent.idVol+parent.end);
        String message = parent.readMessage();
        if(Integer.parseInt(message) == Client_AirTrafficControllers.SUCCESS)
        {
            checkbaggageJB.setEnabled(false);
            readyJB.setSelected(true);
            getpisteJB.setEnabled(true);
            JOptionPane.showMessageDialog(this,"Tous les baggages sont bien chargés !");

        }
        else
        {
            JOptionPane.showMessageDialog(this,"Tous les baggages n'ont pas été chargé !");
        }
    }//GEN-LAST:event_checkbaggageJBActionPerformed

    private void getpisteJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getpisteJBActionPerformed
        // TODO add your handling code here:
        parent.sendMessage(Client_AirTrafficControllers.GET_PISTE+parent.end);
        
        String message = parent.readMessage();
        String[] messageSplit = message.split("\\"+parent.sep);
        if(Integer.parseInt(messageSplit[0]) == Client_AirTrafficControllers.SUCCESS)
        {
            pistesJCMB.removeAllItems();
            for(int i =1;i<messageSplit.length;i++)
            {
                pistesJCMB.addItem(messageSplit[i]);
                pistesJCMB.setVisible(true);
                choisirJB.setVisible(true);
                getpisteJB.setEnabled(false);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Fail ! toutes les pistes sont occupés !");
        }
    }//GEN-LAST:event_getpisteJBActionPerformed

    private void pistesJCMBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pistesJCMBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pistesJCMBActionPerformed

    private void choisirJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choisirJBActionPerformed
        // TODO add your handling code here:
        parent.sendMessage(parent.CHOOSE_PISTE+parent.sep+(String)pistesJCMB.getSelectedItem()+parent.end);
        String message = parent.readMessage();
        if(Integer.parseInt(message) == Client_AirTrafficControllers.SUCCESS)
        {
            readytoflyJB.setSelected(true);
            getpisteJB.setEnabled(false);
            choisirJB.setVisible(false);
            pistesJCMB.setVisible(false);
            takingoffJB.setEnabled(true);
            JOptionPane.showMessageDialog(this,"Piste libre et attribué !");
        }
        else
        {
            JOptionPane.showMessageDialog(this,"La piste n'est plus libre!");
            pistesJCMB.setVisible(false);
            choisirJB.setVisible(false);
            getpisteJB.setEnabled(true);
        }
    }//GEN-LAST:event_choisirJBActionPerformed

    private void takingoffJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takingoffJBActionPerformed
        // TODO add your handling code here:
        System.out.println("Coucou ?");
        parent.sendMessage(parent.TAKING_OFF+parent.end);
        if(Integer.parseInt(parent.readMessage()) == parent.SUCCESS)
        {
            takingoffJB.setEnabled(false);
            flyingJB.setEnabled(true);
        }
    }//GEN-LAST:event_takingoffJBActionPerformed

    private void flyingJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flyingJBActionPerformed
        // TODO add your handling code here:
        parent.sendMessage(parent.FLYING+parent.end);
        if(Integer.parseInt(parent.readMessage()) == parent.SUCCESS)
        {
            flyingJB.setEnabled(false);
        }
    }//GEN-LAST:event_flyingJBActionPerformed

    private void flyingJBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_flyingJBStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_flyingJBStateChanged

    private void takingoffJBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_takingoffJBStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_takingoffJBStateChanged
    private DataOutputStream dos ;
    private DataInputStream dis;
    public String readMessage()
    {
        StringBuffer message=new StringBuffer();
        try 
        {
            byte b;
            while ((b=dis.readByte())!= (byte)parent.end.charAt(0) )
            {
                if (b!=parent.end.charAt(0))
                    message.append((char) b);
            }

        } 
        catch (IOException ex) {
            Logger.getLogger(Client_AirTrafficControllers.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
        return message.toString().trim();
    }
    public void sendMessage(String s)
    {
        try 
        {
            dos.write(s.trim().getBytes());
            dos.flush();
        } catch (IOException ex) {
            Logger.getLogger(Client_AirTrafficControllers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton busyJB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton checkbaggageJB;
    private javax.swing.JRadioButton checkinoffJB;
    private javax.swing.JButton choisirJB;
    private javax.swing.JRadioButton flyingJB;
    private javax.swing.JButton getpisteJB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> pistesJCMB;
    private javax.swing.JRadioButton readyJB;
    private javax.swing.JRadioButton readytoflyJB;
    private javax.swing.JButton signalerJB;
    private javax.swing.JRadioButton takingoffJB;
    // End of variables declaration//GEN-END:variables
}
