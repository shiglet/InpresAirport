/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import ConfigurationFile.Configuration;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sadik
 */
public class ChatConnexion extends javax.swing.JDialog {

    /**
     * Creates new form ChatConnexion
     */
    private static int LOGIN_GROUP = 1;
    private static int LOGIN_OK = 2;
    private static int LOGIN_NOK = 3;
    private static int PORT_FOR_US_ONLY = 20030;
    private DataOutputStream dos;
    private DataInputStream dis;
    private Socket CSocket;
    private boolean connected;
    private String login;
    public String ADRESSE;
    public int PORT_CHAT;
    private String ip;
    private String sep;
    private String end;
    public ChatConnexion(java.awt.Frame parent, boolean modal) 
    {
        super(parent, modal);
        initComponents();
        connected = false;
        login = "";
        Configuration config = new Configuration();
        PORT_FOR_US_ONLY = Integer.parseInt(config.getPropertie("PORT_CHAT"));
        ip = config.getPropertie("IP_CHAT");
        sep = config.getPropertie("TRAME_SEPARATOR");
        end = config.getPropertie("END_TRAME");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPassword = new javax.swing.JLabel();
        jLabelConnexionServeur = new javax.swing.JLabel();
        jButtonConnexion = new javax.swing.JButton();
        jLabelApplicationCliente = new javax.swing.JLabel();
        jLabelLogo = new javax.swing.JLabel();
        jTextFieldLogin = new javax.swing.JTextField();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jLabelLogin = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelPassword.setText("Password");

        jLabelConnexionServeur.setText("Connexion au serveur");

        jButtonConnexion.setText("Connexion");
        jButtonConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnexionActionPerformed(evt);
            }
        });

        jLabelApplicationCliente.setText("Mummy Store Chat");

        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Manager-icon-150x150.png"))); // NOI18N

        jTextFieldLogin.setText("sadik");

        jPasswordFieldPassword.setText("1234");

        jLabelLogin.setText("Login");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelConnexionServeur))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLogin)
                            .addComponent(jLabelPassword))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonConnexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldLogin)
                            .addComponent(jPasswordFieldPassword)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLogo)
                            .addComponent(jLabelApplicationCliente))))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelApplicationCliente)
                .addGap(38, 38, 38)
                .addComponent(jLabelLogo)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelConnexionServeur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLogin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonConnexion))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnexionActionPerformed
        try 
        {
            CSocket = new Socket(ip,PORT_FOR_US_ONLY);
            dos = new DataOutputStream(CSocket.getOutputStream());
            dis = new DataInputStream(CSocket.getInputStream());
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(ChatConnexion.class.getName()).log(Level.SEVERE, null, ex);
        }
        String message="Login ou mot de passe ne peuvent Ãªtre vide !";
        boolean error=false;
        if(jTextFieldLogin.getText().isEmpty()|| jPasswordFieldPassword.getText().isEmpty())
            error=true;
        else
        {
            login = jTextFieldLogin.getText();
            String pwd = jPasswordFieldPassword.getText();
            /*
            //Digest Bouncy Castle
            long time = (new Date()).getTime();
            double r = Math.random();
            byte[] p = buildDigest(time,r,pwd,login);
            System.out.println((Arrays.toString(p)));
            sendMessage(LOGIN_GROUP+sep+login+sep+p.length+sep+time+sep+r+end);
            sendDigest(p);
            message = readMessage();
            String[] messageSplit = message.split("\\"+sep);
            System.out.println(message);
            int type = Integer.parseInt(messageSplit[0]);
            if(type == LOGIN_OK)
            {
                connected = true;
                error = false;
                ADRESSE = messageSplit[1];
                PORT_CHAT = Integer.parseInt(messageSplit[2]);
            }
            else if(type == LOGIN_NOK)
            {
                connected = false;
                error = true;
            }
            message = messageSplit[1];*/
            //Digest Simple
            int r = 0 + (int)(Math.random() * ((10000 - 0) + 1));
            int h = hashage(pwd,r);
            sendMessage(LOGIN_GROUP+sep+login+sep+h+sep+r+end);
            message = readMessage();
            String[] messageSplit = message.split("\\"+sep);
            System.out.println(message);
            int type = Integer.parseInt(messageSplit[0]);
            if(type == LOGIN_OK)
            {
                connected = true;
                error = false;
                ADRESSE = messageSplit[1];
                PORT_CHAT = Integer.parseInt(messageSplit[2]);
            }
            else if(type == LOGIN_NOK)
            {
                connected = false;
                error = true;
            }
            message = messageSplit[1];
        }
        if(error)
        {
            JOptionPane.showMessageDialog(rootPane, message );
            connected = false;
        }
        else 
        {
            connected = true;
            System.out.println("Adresse = "+ADRESSE+" port = "+PORT_CHAT);
            try {
                CSocket.close();
            } catch (IOException ex) {
                Logger.getLogger(ChatConnexion.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setVisible(false);
        }
    }//GEN-LAST:event_jButtonConnexionActionPerformed
    public int hashage(String s, int r)
    {
        int sum=0;
        for (int i = 0; i < s.length(); i++)
        {
            char c = s.charAt(i);
            sum = sum + (int) c;
        }
        sum = (sum + r % 67)*r;
        return sum;
    }
    private void sendDigest(byte[] b)
    {
        try 
        {
            dos.write(b);
            dos.flush();
        }
        catch (IOException ex) 
        {
            System.err.println("Erreur du sendMessage dans ThreadClientMV :  "+ex);
        }
    }
    private byte[] buildDigest(long time,double r,String password,String login)
    {
        byte[] msgD = null;
        try 
        {
            MessageDigest md = MessageDigest.getInstance("SHA-1", "BC");
            md.update(login.getBytes());
            md.update(password.getBytes());

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            DataOutputStream bdos = new DataOutputStream(baos);
            bdos.writeLong(time);
            bdos.writeDouble(r);

            md.update(baos.toByteArray());
            msgD = md.digest();
        } 
        catch (IOException | NoSuchAlgorithmException | NoSuchProviderException ex) 
        {
            Logger.getLogger(ChatConnexion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return msgD;
    }
    public boolean getConnected()
    {
        return connected;
    }
    public String getLogin()
    {
        return login;
    }
     public String readMessage()
    {
        StringBuffer message=new StringBuffer();
        byte b;
        try {
            
            while ((b=dis.readByte())!= (byte)end.charAt(0) )
            {
                if (b!=end.charAt(0))
                    message.append((char) b);
            }
            
        } 
        catch (IOException ex) {
            System.err.println("Erreur du readMessage dans ThreadClientMV :  "+ex);
        }
        return message.toString().trim();
    }
    public void sendMessage(String s)
    {
        try 
        {
            System.out.println("Envoie de "+s.trim());
            dos.write(s.trim().getBytes());
            dos.flush();
        }
        catch (IOException ex) 
        {
            System.err.println("Erreur du sendMessage dans ThreadClientMV :  "+ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChatConnexion dialog = new ChatConnexion(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnexion;
    private javax.swing.JLabel jLabelApplicationCliente;
    private javax.swing.JLabel jLabelConnexionServeur;
    private javax.swing.JLabel jLabelLogin;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JTextField jTextFieldLogin;
    // End of variables declaration//GEN-END:variables
}
